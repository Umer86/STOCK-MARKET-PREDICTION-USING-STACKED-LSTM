# -*- coding: utf-8 -*-
"""TASK-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CGrhND1NfYwfl3qg7CCGc9321O-z48m5

# **LetsGrowMore**

---



---
# ***Data Science Internship***

---



---

## `Author: UMER FAROOQ`
## `Task Level: Beginner Level`
## `Task Number: 3`
## `Task Title: Stock Market Prediction Using Stacked LSTM`


## `Language: Python`
## `IDE: Google Colab`

# **Introduction:**

---



---


***Stock market prediction is the act of trying to determine the future value of a company stock or other financial instrument traded on a financial exchange.***



---



---

I have used Apple (AAPL) dataset, that i have already downloaded and will be availble with this repository. You can also access Apple Stock data from this API: The API Key can be generated from : https://www.tiingo.com/

---

---

# **Step:1**
***Importing Libraries***
"""

import warnings
import numpy
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import math
import numpy as np
from numpy import array
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

warnings.filterwarnings('ignore')

"""# **Step:2**

**DATA LOADING:**
"""

df=pd.read_csv('AAPL.csv')

df.head() # Reading the first 5 rows

df.tail() # reading the last records of the file

df1 = df.reset_index()['close']

df1

plt.plot(df1)

"""

```
# LSTM are sensitive to the scale of the data. so we apply MinMax scaler 
```

"""

scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))

print(df1)

"""# **Step:3**

**Splitting, Training and Testing Dataset:**
"""

training_size=int(len(df1)*0.65)
test_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]

print("Training data size is {} , Test size is {} , Trained Data is:\n {} ".format(training_size,test_size, train_data))

"""Convert an Array of Values into a Dataset Matrix:"""

def create_dataset(dataset, time_step=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-time_step-1):
		a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 
		dataX.append(a)
		dataY.append(dataset[i + time_step, 0])
	return numpy.array(dataX), numpy.array(dataY)

"""**Reshape into X=t,t+1,t+2,t+3 and Y=t+4**"""

time_step = 100
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)

print(X_train.shape), print(y_train.shape)

print(X_test.shape), print(ytest.shape)

"""**Reshape input to be [samples, time steps, features] which is required for LSTM**"""

X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

"""# **CREATE STACKED LSTM MODEL:**"""

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)

"""**Lets Do the prediction and check performance metrics:**"""

train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

"""**Transformback to original form:**"""

train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

"""**Calculate RMSE Performance Metrics:**"""

math.sqrt(mean_squared_error(y_train,train_predict))

"""**Test Data RMSE:**"""

math.sqrt(mean_squared_error(ytest,test_predict))

"""# **PLOTTING:**

**Shift train predictions for plottin:**
"""

look_back=100
trainPredictPlot = numpy.empty_like(df1)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict

"""**Shift test predictions for plotting:**"""

testPredictPlot = numpy.empty_like(df1)
testPredictPlot[:, :] = numpy.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict

"""**Plot baseline and predictions:**"""

plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()

len(test_data)

x_input=test_data[341:].reshape(1,-1)
x_input.shape

temp_input=list(x_input)
temp_input=temp_input[0].tolist()
temp_input

# demonstrate prediction for next 10 days
from numpy import array

lst_output=[]
n_steps=100
i=0
while(i<30):
    
    if(len(temp_input)>100):
        #print(temp_input)
        x_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1
    

print(lst_output)

day_new=np.arange(1,101)
day_pred=np.arange(101,131)

plt.plot(day_new,scaler.inverse_transform(df1[1158:]))
plt.plot(day_pred,scaler.inverse_transform(lst_output))

df3=df1.tolist()
df3.extend(lst_output)
plt.plot(df3[1200:])

df3=scaler.inverse_transform(df3).tolist()
plt.plot(df3)